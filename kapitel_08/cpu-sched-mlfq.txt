1. Run a few randomly-generated problems with just two jobs and
two queues; compute the MLFQ execution trace for each. Make
your life easier by limiting the length of each job and turning off
I/Os

python3 mlfq.py -s 1 -j 2 -n 2 -m 100 -M 0

2. How would you run the scheduler to reproduce each of the exam-
ples in the chapter?

    8.2 python3 mlfq.py -n 3 --jlist 0,200,0 -c
    8.3 python3 mlfq.py -n 3 --jlist 0,180,0:100,20,0 -c
    8.4 python3 mlfq.py -n 3 --jlist 0,200,0:50,25,1 -c -S
    8.5 (left) python3 mlfq.py -n 3 --jlist 0,120,0:100,50,1:100,50,1 -c -S -i 1
    8.5 (right) python3 mlfq.py -n 3 --jlist 0,120,0:100,50,1:100,50,1 -c -S -i 1 -B 50
    8.6 (left) python3 mlfq.py -n 3 --jlist 0,200,0:80,100,9 -c -i 1 -S
    8.6 (right) python3 mlfq.py -n 3 --jlist 0,200,0:10:20,10,10:20,180,0
    8.7 python3 mlfq.py -n 3 --jlist 0,140,0:0,140,0 -c -Q 10,20,40 -a 2


3. How would you configure the scheduler parameters to behave just
like a round-robin scheduler?

    -q time == -m length
    python3 mlfq.py -n 2 -m 10 -M 0 -c -l 0,100,0:0,100,0


4. Craft a workload with two jobs and scheduler parameters so that
one job takes advantage of the older Rules 4a and 4b (turned on
with the -S flag) to game the scheduler and obtain 99% of the CPU
over a particular time interval.

    python3 mlfq.py -n 3 -l 0,100,0:50,100,9 -i 1 -S -c

5. Given a system with a quantum length of 10 ms in its highest queue,
how often would you have to boost jobs back to the highest priority
level (with the -B flag) in order to guarantee that a single long-
running (and potentially-starving) job gets at least 5% of the CPU?

    time slice / percentage of cpu use. 
    Therefore:
    10ms/0,05 = 200ms

6. One question that arises in scheduling is which end of a queue to
add a job that just finished I/O; the -I flag changes this behavior
for this scheduling simulator. Play around with some workloads
and see if you can see the effect of this flag.

    After finishing I/O without the -I flag the job is set to the end of the queue, whereas with the -I flag it is set to the start of the queue

